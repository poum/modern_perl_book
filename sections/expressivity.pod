=head1 Expressivité

Z<expressivity>

X<Wall, Larry>
X<Larry Wall>

Les études de Larry Wall en linguistique et en matière de langages humains ont influencé
la conception de Perl. Le langage vous permet une liberté fabuleuse pour résoudre vos
problèmes, selon le style de votre groupe, le temps disponible, la durée de vie attendue 
du projet ou même de comment vous vous sentez créatif. Vous pouvez écrire du code simple et
immédiat ou l'intégrer dans des programmes plus vastes et bien définis. Vous pouvez choisir 
parmi de nombreux paradigmes de conception et vous pouvez éviter ou adopter des fonctionnalités
avancées.

Alors que d'autres langages contraignent à suivre une meilleure façon d'écrire du code, 
Perl I<vous> permet de décider de ce qui est le plus lisible, le plus utile ou le plus
amusant.

X<TIMTOWTDI>
X<Tim Toady>

Les hackers Perl ont un slogan pour cela : I<TIMTOWTDI>, prononcé "Tim Taudi" ou 
"There's more than one way to do it!" ("il y a plus d'une façon de le faire !").

Bien que cette expressivité permettent aux maîtres artisans de créer des programmes
étonnants, elle autorise des choses peu sages ou peu prudentes qui mettent le bazar.
L'expérience et le bon goût vous guideront pour écrire du très bon code. Le choix
vous appartient - mais gardez toujours à l'esprit le souci de la lisibilité et de 
la maintenabilité, spécialement pour ceux qui viendront après vous.

Les novices en Perl trouvent souvent certaines tournures obscures. Beaucoup de
ces idiomes (L<idioms>) offrent un pouvoir considérable (si ce n'est subtil). Mais rien
ne s'oppose à ce que vous les évitiez jusqu'à ce que vous soyez à l'aise avec eux.

Apprendre Perl est comme apprendre une nouvelle langue. Vous allez apprendre quelques
mots, les assembler pour faire des phrases et bientôt goûter aux joies de conversations
simples. La maîtrise vient avec la pratique de la lecture et de l'écriture. Vous n'avez
pas à comprendre chaque détail de Perl pour être productif maus les principes de ce 
chapitre sont vitaux pour grandir en tant que programmeur.

Comme autre principe de conception, Perl essaie d'éviter de surprendre les
programmeurs expérimentés (en Perl). Par exemple, ajouter deux variables
(C<$premier_nombre + $second_nombre>) est à l'évidence une opération numérique (L<numeric_operators>);
l'opérateur d'addition doit traiter ces deux opérandes comme des valeurs numériques
Peu importe le contenu de C<$premier_nombre> et de C<$second_nombre>, Perl va les forcer
à devenir des valeurs numériques (L<numeric_coercion>). Vous avez exprimé votre intention
de les traiter comme des nombres en utilisant l'opérateur numérique. Perl s'exécute avec joie.

X<DWIM>
X<principle of least astonishment>

Les adeptes de Perl appellent souvent cela le principe de I<DWIM> ou I<do what I mean>
(I<fait ce que je pense>). Une autre formulation est que Perl suit le I<principe de moindre
surprise>. Etant donnée une compréhension superficielle de Perl (notamment de ce qu'est le 
contexte; L<context_philosophy>), il doit être possible de comprendre l'intention d'une expression
Perl non familière. Vous développerez cette aptitude.

X<baby Perl>

L'expressivité de Perl permet également aux novices d'écrire des programmes tout à
fait utiles sans avoir à tout comprendre. Le code résultant est souvent appelé
I<baby Perl>, au sens où tout le monde veut aider les bébés à bien communiquer.
Tout le monde commence par être novice. A l'aide de la pratique et des enseignements
des programmeurs plus expérimentés, vous comprendrez et adopterez des idiomes et des 
techniques plus puissants.

Par exemple, un hacker Perl expérimenté pourrait tripler une liste de nombre avec:

=begin programlisting

    my @triples = map { $_ * 3 } @nombres;

=end programlisting

... et un adepte Perl pourrait écrire:

=begin programlisting

    my @triples;

    for my $nombre (@nombres)
    {
        push @triples, $nombre * 3;
    }

=end programlisting

... alors qu'un novice pourrait essayer:

=begin programlisting

    my @triples;

    for (my $i = 0; $i < scalar @nombres; $i++)
    {
        $triples[$i] = $nombres[$i] * 3;
    }

=end programlisting

Ces trois approches accomplissent la même chose, mais chacune utilise Perl
d'une façon différente.

L'expérience dans l'écriture en Perl vous aidera à vous concentrer sur I<ce que> vous
voulez plutôt que C<comment> le faire. Même ainsi, Perl exécutera sans problème des 
programmes simples. Vous pouvez concevoir et revoir vos programmes à la recherche de
clarté, d'expressivité, de réutilisabilité et de maintenabilité, par partie ou globalement.
Tirez avantage de cette flexibilité et de ce pragmatisme: il est bien mieux d'accomplir
effectivement votre tâche maintenant que d'écrire un programme magnifique et conceptuellement
pur l'année prochaine.
